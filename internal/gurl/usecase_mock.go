// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gurl/usecase.go

// Package gurl is a generated GoMock package.
package gurl

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCaseImpl is a mock of UseCaseImpl interface.
type MockUseCaseImpl struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseImplMockRecorder
}

// MockUseCaseImplMockRecorder is the mock recorder for MockUseCaseImpl.
type MockUseCaseImplMockRecorder struct {
	mock *MockUseCaseImpl
}

// NewMockUseCaseImpl creates a new mock instance.
func NewMockUseCaseImpl(ctrl *gomock.Controller) *MockUseCaseImpl {
	mock := &MockUseCaseImpl{ctrl: ctrl}
	mock.recorder = &MockUseCaseImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseImpl) EXPECT() *MockUseCaseImplMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockUseCaseImpl) Store(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockUseCaseImplMockRecorder) Store(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockUseCaseImpl)(nil).Store), url)
}
